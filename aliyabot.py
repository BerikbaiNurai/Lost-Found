import os
import logging
import sqlite3
import asyncio
from aiohttp import web
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler, CallbackQueryHandler
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"
PORT = int(os.getenv("PORT", 8080))
RAILWAY_URL = os.getenv("RAILWAY_URL")

logging.basicConfig(level=logging.INFO)

CHOOSING, TYPING_DESC, ASK_PHOTO, SENDING_PHOTO = range(4)

conn = sqlite3.connect("lostfound.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS items (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        username TEXT,
        type TEXT,
        description TEXT,
        photo_file_id TEXT
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS button_stats (
        button_name TEXT PRIMARY KEY,
        clicks INTEGER DEFAULT 0
    )
''')
conn.commit()

def update_button_stat(button_name):
    cursor.execute('''
        INSERT INTO button_stats (button_name, clicks)
        VALUES (?, 1)
        ON CONFLICT(button_name)
        DO UPDATE SET clicks = clicks + 1
    ''', (button_name,))
    conn.commit()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "anon"

    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()

    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]

    keyboard = [["üü¢ –ù–∞—à—ë–ª", "üî¥ –ü–æ—Ç–µ—Ä—è–ª"],
                ["üü¢ –ù–∞–π–¥–µ–Ω–æ", "üî¥ –ü–æ—Ç–µ—Ä—è–Ω–æ"],
                ["üóÇ –ú–æ–∏ –ø–æ—Å—Ç—ã"]]

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –¢—ã {count}-–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Å—á—ë—Ç—É.\n–Ø –±–æ—Ç Lost&Found AlmaU. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CHOOSING

async def send_template(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str = ""):
    if mode == "found":
        template = (
            "‚ùóÔ∏è*–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –≤–µ—â—å:*\n\n"
            "*1. –ß—Ç–æ –≤—ã –Ω–∞—à–ª–∏:*\n"
            "_–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π, –±—Ä–∞—Å–ª–µ—Ç, –±—É—Ç—ã–ª–∫–∞ –∏ —Ç.–ø._\n\n"
            "*2. –ì–¥–µ –Ω–∞—à–ª–∏:*\n"
            "_–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ: –∞—É–¥–∏—Ç–æ—Ä–∏—è, –∫–æ—Ä–ø—É—Å, –∫–æ—Ä–∏–¥–æ—Ä, —Å—Ç–æ–ª–æ–≤–∞—è –∏ —Ç.–ø._\n\n"
            "*3. –ö–æ–≥–¥–∞ –Ω–∞—à–ª–∏:*\n"
            "_–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ_\n\n"
            "*4. –ö–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≥–¥–µ –∑–∞–±—Ä–∞—Ç—å:*"
        )
    elif mode == "lost":
        template = (
            "‚ùóÔ∏è*–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –∏—â–∏—Ç–µ –≤–µ—â—å:*\n\n"
            "*1. –ß—Ç–æ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏:*\n"
            "_–ö—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–æ–Ω—Ç, –∫–ª—é—á–∏, —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç –∏ —Ç.–¥._\n\n"
            "*2. –ì–¥–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–∏:*\n"
            "_–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø—É—Å, –∞—É–¥–∏—Ç–æ—Ä–∏—é, –∑–æ–Ω—É (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞, —Å—Ç–æ–ª–æ–≤–∞—è –∏ —Ç.–¥.)_\n\n"
            "*3. –ö–æ–≥–¥–∞ –ø–æ—Ç–µ—Ä—è–ª–∏:*\n"
            "_–î–∞—Ç–∞ –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è_\n\n"
            "*4. –§–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)*"
        )
    else:
        template = (
            "‚ùóÔ∏è*–û–±—â–∏–π —à–∞–±–ª–æ–Ω:*\n\n"
            "1. –ß—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ\n"
            "2. –ì–¥–µ\n"
            "3. –ö–æ–≥–¥–∞\n"
            "4. –§–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
            "5. –ö–æ–Ω—Ç–∞–∫—Ç: @username\n"
            "#–ø–æ–∏—Å–∫ #–Ω–∞—Ö–æ–¥–∫–∞"
        )
    await update.message.reply_text(template, parse_mode="Markdown")
    return CHOOSING

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    if msg == "üü¢ –ù–∞—à—ë–ª":
        update_button_stat("–ù–∞—à—ë–ª")
        context.user_data["type"] = "found"
        await send_template(update, context, "found")
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return TYPING_DESC
    elif msg == "üî¥ –ü–æ—Ç–µ—Ä—è–ª":
        update_button_stat("–ü–æ—Ç–µ—Ä—è–ª")
        context.user_data["type"] = "lost"
        await send_template(update, context, "lost")
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return TYPING_DESC
    elif msg == "üü¢ –ù–∞–π–¥–µ–Ω–æ":
        update_button_stat("–ù–∞–π–¥–µ–Ω–æ")
        return await show_found_items(update, context)
    elif msg == "üî¥ –ü–æ—Ç–µ—Ä—è–Ω–æ":
        update_button_stat("–ü–æ—Ç–µ—Ä—è–Ω–æ")
        return await show_lost_items(update, context)
    elif msg == "üóÇ –ú–æ–∏ –ø–æ—Å—Ç—ã":
        update_button_stat("–ú–æ–∏ –ø–æ—Å—Ç—ã")
        return await show_my_posts(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return CHOOSING

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    control_buttons = ["üü¢ –ù–∞—à—ë–ª", "üî¥ –ü–æ—Ç–µ—Ä—è–ª", "üü¢ –ù–∞–π–¥–µ–Ω–æ", "üî¥ –ü–æ—Ç–µ—Ä—è–Ω–æ", "üóÇ –ú–æ–∏ –ø–æ—Å—Ç—ã"]

    if text in control_buttons:
        return await choose_action(update, context)

    context.user_data["description"] = text
    keyboard = [["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]]
    await update.message.reply_text("–£ –≤–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ —ç—Ç–æ–π –≤–µ—â–∏?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ASK_PHOTO

async def ask_for_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    if answer == "‚úÖ –î–∞":
        await update.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        return SENDING_PHOTO
    elif answer == "‚ùå –ù–µ—Ç":
        return await save_item_without_photo(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç.")
        return ASK_PHOTO

async def save_item_without_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    cursor.execute('''
        INSERT INTO items (user_id, username, type, description, photo_file_id)
        VALUES (?, ?, ?, ?, ?)
    ''', (
        update.message.from_user.id,
        update.message.from_user.username or "anon",
        data["type"],
        data["description"],
        None
    ))
    conn.commit()
    await update.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    return await start(update, context)

async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    photo_file_id = update.message.photo[-1].file_id
    cursor.execute('''
        INSERT INTO items (user_id, username, type, description, photo_file_id)
        VALUES (?, ?, ?, ?, ?)
    ''', (
        update.message.from_user.id,
        update.message.from_user.username or "anon",
        data["type"],
        data["description"],
        photo_file_id
    ))
    conn.commit()
    await update.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    return await start(update, context)

async def show_found_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT username, description, photo_file_id FROM items WHERE type = 'found' ORDER BY id DESC LIMIT 5")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return CHOOSING
    for username, desc, photo in rows:
        caption = f"üü¢ *–ù–∞–π–¥–µ–Ω–æ*\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {desc}\n*–ö–æ–Ω—Ç–∞–∫—Ç:* @{username}"
        if photo:
            await update.message.reply_photo(photo, caption=caption, parse_mode="Markdown")
        else:
            await update.message.reply_text(caption + "\n\nüìå *–§–æ—Ç–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*", parse_mode="Markdown")
    return CHOOSING

async def show_lost_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT username, description, photo_file_id FROM items WHERE type = 'lost' ORDER BY id DESC LIMIT 5")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("‚ùå –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –≤–µ—â–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return CHOOSING
    for username, desc, photo in rows:
        caption = f"üî¥ *–ü–æ—Ç–µ—Ä—è–Ω–æ*\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {desc}\n*–ö–æ–Ω—Ç–∞–∫—Ç:* @{username}"
        if photo:
            await update.message.reply_photo(photo, caption=caption, parse_mode="Markdown")
        else:
            await update.message.reply_text(caption + "\n\nüìå *–§–æ—Ç–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*", parse_mode="Markdown")
    return CHOOSING

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("delete:"):
        item_id = int(data.split(":")[1])
        cursor.execute("DELETE FROM items WHERE id = ?", (item_id,))
        conn.commit()
        try:
            await query.message.delete()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", e)
    elif data == "ignore":
        await query.answer("üëå –•–æ—Ä–æ—à–æ, –ø–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", show_alert=False)

async def show_my_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cursor.execute("SELECT id, type, description, photo_file_id FROM items WHERE user_id = ? ORDER BY id DESC LIMIT 10", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        return CHOOSING
    for item_id, item_type, desc, photo in rows:
        label = "üü¢ –ù–∞–π–¥–µ–Ω–æ" if item_type == "found" else "üî¥ –ü–æ—Ç–µ—Ä—è–Ω–æ"
        caption = f"{label}\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {desc}\n*–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç.*"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{item_id}"),
            InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å", callback_data="ignore")
        ]])
        if photo:
            await update.message.reply_photo(photo, caption=caption, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await update.message.reply_text(caption + "\n\nüìå *–§–æ—Ç–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*", parse_mode="Markdown", reply_markup=keyboard)
    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def show_user_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    await update.message.reply_text(f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_action)],
            TYPING_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            ASK_PHOTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_for_photo)],
            SENDING_PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CommandHandler("users", show_user_count))

    await app.bot.delete_webhook()
    webhook_url = f"{RAILWAY_URL}{WEBHOOK_PATH}"
    await app.bot.set_webhook(webhook_url)

    async def handler(request):
        data = await request.json()
        update = Update.de_json(data, app.bot)
        await app.process_update(update)          
        return web.Response(text="OK")

    web_app = web.Application()
    web_app.router.add_post(WEBHOOK_PATH, handler)

    print(f"üöÄ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç: {webhook_url}")
    await app.initialize()
    await app.start()
    await web._run_app(web_app, port=PORT)
    await app.stop()

if __name__ == "__main__":
    asyncio.run(main())